#include <stdio.h>

#define MAX 10  // Maximum size of the matrix

// Function to get the cofactor of the matrix
void getCofactor(int mat[MAX][MAX], int temp[MAX][MAX], int p, int q, int size) {
    int i = 0, j = 0;
    
    // Loop through the elements of the matrix
    for (int row = 0; row < size; row++) {
        for (int col = 0; col < size; col++) {
            // Skip the current row and column (p and q)
            if (row != p && col != q) {
                temp[i][j++] = mat[row][col];
                if (j == size - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

// Function to calculate the determinant of the matrix
int determinant(int mat[MAX][MAX], int size) {
    int D = 0; // To store the determinant
    if (size == 1) {
        return mat[0][0];
    }
    
    int temp[MAX][MAX]; // To store cofactors
    int sign = 1; // Sign multiplier for cofactor

    // Loop to expand the matrix along the first row
    for (int f = 0; f < size; f++) {
        // Get the cofactor matrix for the current element
        getCofactor(mat, temp, 0, f, size);
        
        // Recursively calculate the determinant for the cofactor matrix
        D += sign * mat[0][f] * determinant(temp, size - 1);

        // Alternate the sign for the next cofactor expansion
        sign = -sign;
    }
    
    return D;
}

// Function to find the adjoint (adjugate) of a matrix
void adjoint(int mat[MAX][MAX], int adj[MAX][MAX], int size) {
    if (size == 1) {
        adj[0][0] = 1;
        return;
    }

    int temp[MAX][MAX]; // To store cofactor matrix
    int sign = 1;

    // Loop through each element of the matrix
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            // Get the cofactor of mat[i][j]
            getCofactor(mat, temp, i, j, size);

            // Sign of cofactor is positive if sum of row and column indexes is even
            sign = ((i + j) % 2 == 0) ? 1 : -1;

            // Store the adjoint by transposing the cofactor matrix
            adj[j][i] = sign * determinant(temp, size - 1);
        }
    }
}

// Function to find the inverse of a matrix
int inverse(int mat[MAX][MAX], float inverse[MAX][MAX], int size) {
    // Calculate the determinant of the matrix
    int det = determinant(mat, size);
    
    // If determinant is 0, the matrix is singular and has no inverse
    if (det == 0) {
        printf("Matrix is singular, no inverse exists.\n");
        return 0;
    }
    
    // Find the adjoint of the matrix
    int adj[MAX][MAX];
    adjoint(mat, adj, size);

    // Calculate the inverse using the formula: adj(A) / det(A)
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            inverse[i][j] = (float)adj[i][j] / det;
        }
    }

    return 1;
}

// Function to input a matrix
void inputMatrix(int mat[MAX][MAX], int size) {
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            scanf("%d", &mat[i][j]);
        }
    }
}

// Function to print a matrix
void printMatrix(float mat[MAX][MAX], int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%f ", mat[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int mat[MAX][MAX];
    float inv[MAX][MAX];
    int size;

    // Input the size of the matrix
    printf("Enter the size of the matrix: ");
    scanf("%d", &size);

    // Ensure that the matrix is square
    if (size <= 0 || size > MAX) {
        printf("Invalid size. The size must be between 1 and %d.\n", MAX);
        return -1;
    }

    // Input the matrix
    inputMatrix(mat, size);

    // Calculate the inverse
    if (inverse(mat, inv, size)) {
        printf("Inverse of the matrix is:\n");
        printMatrix(inv, size);
    }

    return 0;
}
